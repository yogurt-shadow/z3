(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Casey Mulligan, Russell Bradford, James H. Davenport, Matthew England, and ZakTonks
Generated on: 2018-04-19
Generator: TheoryGuru
Application: Constant absolute risk aversion with states delineated, example set
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)

; Code written by TheoryGuru
; Mulligan model #1001
;   is part of the example library included in "Quantifier Elimination for Reasoning in Economics" April 2018
;   by Mulligan, Bradford, Davenport, England, and Tonks
;   available at bathpaper.economicreasoning.com .
; Economics background for this and other examples is provided at examples.economicreasoning.com .

(declare-fun v1 () Real)
(declare-fun v2 () Real)
(declare-fun v3 () Real)
(declare-fun v4 () Real)
(declare-fun v5 () Real)
(declare-fun v6 () Real)
(declare-fun v7 () Real)
(declare-fun v8 () Real)
(declare-fun v9 () Real)
(declare-fun v10 () Real)
(declare-fun v11 () Real)
(declare-fun v12 () Real)
(declare-fun v13 () Real)
(declare-fun v14 () Real)
(declare-fun v15 () Real)
(declare-fun v16 () Real)
(declare-fun v17 () Real)
(declare-fun v18 () Real)
(declare-fun v19 () Real)
(declare-fun v20 () Real)
(declare-fun v21 () Real)
(declare-fun v22 () Real)
(declare-fun v23 () Real)
(declare-fun v24 () Real)
(declare-fun v25 () Real)
(declare-fun v26 () Real)
(declare-fun v27 () Real)
(declare-fun v28 () Real)
(declare-fun v29 () Real)
(declare-fun v30 () Real)
(declare-fun v31 () Real)
(declare-fun v32 () Real)
(declare-fun v33 () Real)
(declare-fun v34 () Real)
(declare-fun v35 () Real)
(declare-fun v36 () Real)
(declare-fun v37 () Real)
(declare-fun v38 () Real)
(declare-fun v39 () Real)
(declare-fun v40 () Real)
(declare-fun v41 () Real)
(declare-fun v42 () Real)
(declare-fun v43 () Real)
(declare-fun v44 () Real)
(declare-fun v45 () Real)
(declare-fun v46 () Real)
(declare-fun v47 () Real)
(declare-fun v48 () Real)
(declare-fun v49 () Real)
(declare-fun v50 () Real)
(declare-fun v51 () Real)
(declare-fun v52 () Real)
(declare-fun v53 () Real)
(declare-fun v54 () Real)
(declare-fun v55 () Real)
(declare-fun v56 () Real)
(declare-fun v57 () Real)
(declare-fun v58 () Real)
(declare-fun v59 () Real)
(declare-fun v60 () Real)
(declare-fun v61 () Real)
(declare-fun v62 () Real)
(declare-fun v63 () Real)
(declare-fun v64 () Real)
(declare-fun v65 () Real)
(declare-fun v66 () Real)
(declare-fun v67 () Real)
(declare-fun v68 () Real)
(declare-fun v69 () Real)
(declare-fun v70 () Real)
(declare-fun v71 () Real)
(declare-fun v72 () Real)
(declare-fun v73 () Real)
(declare-fun v74 () Real)
(declare-fun v75 () Real)
(declare-fun v76 () Real)
(declare-fun v77 () Real)
(declare-fun v78 () Real)
(declare-fun v79 () Real)
(declare-fun v80 () Real)
(declare-fun v81 () Real)
(declare-fun v82 () Real)
(declare-fun v83 () Real)
(declare-fun v84 () Real)
(declare-fun v85 () Real)
(declare-fun v86 () Real)
(declare-fun v87 () Real)
(declare-fun v88 () Real)
(declare-fun v89 () Real)
(declare-fun v90 () Real)
(declare-fun v91 () Real)
(declare-fun v92 () Real)
(declare-fun v93 () Real)
(declare-fun v94 () Real)
(declare-fun v95 () Real)
(declare-fun v96 () Real)
(declare-fun v97 () Real)
(declare-fun v98 () Real)
(declare-fun v99 () Real)
(declare-fun v100 () Real)
(declare-fun v101 () Real)

; input assumptions
(define-fun assumptions () Bool (and 
(= (+ (* v3 v36) (* v37 v4) (* v10 v43) (* v11 v44) (* v12 v45) (* v13 v46) (* v14 v47) (* v15 v48) (* v16 v49) (* v38 v5) (* v17 v50) (* v18 v51) (* v19 v52) (* v20 v53) (* v21 v54) (* v22 v55) (* v23 v56) (* v24 v57) (* v25 v58) (* v26 v59) (* v39 v6) (* v27 v60) (* v28 v61) (* v29 v62) (* v30 v63) (* v31 v64) (* v32 v65) (* v33 v66) (* v34 v67) (* v35 v68) (* v40 v7) (* v41 v8) (* v42 v9)) (+ v36 v37 v38 v39 v40 v41 v42 v43 v44 v45 v46 v47 v48 v49 v50 v51 v52 v53 v54 v55 v56 v57 v58 v59 v60 v61 v62 v63 v64 v65 v66 v67 v68))
(< (+ v100 v101 (* (- 2) v100 v34) (* v100 (* v34 v34)) (* (- 2) v101 v35) (* v101 (* v35 v35)) v69 (* (- 2) v3 v69) (* (* v3 v3) v69) v70 (* (- 2) v4 v70) (* (* v4 v4) v70) v71 (* (- 2) v5 v71) (* (* v5 v5) v71) v72 (* (- 2) v6 v72) (* (* v6 v6) v72) v73 (* (- 2) v7 v73) (* (* v7 v7) v73) v74 v75 v76 (* (- 2) v10 v76) (* (* v10 v10) v76) v77 (* (- 2) v11 v77) (* (* v11 v11) v77) v78 (* (- 2) v12 v78) (* (* v12 v12) v78) v79 (* (- 2) v13 v79) (* (* v13 v13) v79) (* (- 2) v74 v8) (* v74 (* v8 v8)) v80 (* (- 2) v14 v80) (* (* v14 v14) v80) v81 (* (- 2) v15 v81) (* (* v15 v15) v81) v82 (* (- 2) v16 v82) (* (* v16 v16) v82) v83 (* (- 2) v17 v83) (* (* v17 v17) v83) v84 (* (- 2) v18 v84) (* (* v18 v18) v84) v85 (* (- 2) v19 v85) (* (* v19 v19) v85) v86 (* (- 2) v20 v86) (* (* v20 v20) v86) v87 (* (- 2) v21 v87) (* (* v21 v21) v87) v88 (* (- 2) v22 v88) (* (* v22 v22) v88) v89 (* (- 2) v23 v89) (* (* v23 v23) v89) (* (- 2) v75 v9) (* v75 (* v9 v9)) v90 (* (- 2) v24 v90) (* (* v24 v24) v90) v91 (* (- 2) v25 v91) (* (* v25 v25) v91) v92 (* (- 2) v26 v92) (* (* v26 v26) v92) v93 (* (- 2) v27 v93) (* (* v27 v27) v93) v94 (* (- 2) v28 v94) (* (* v28 v28) v94) v95 (* (- 2) v29 v95) (* (* v29 v29) v95) v96 (* (- 2) v30 v96) (* (* v30 v30) v96) v97 (* (- 2) v31 v97) (* (* v31 v31) v97) v98 (* (- 2) v32 v98) (* (* v32 v32) v98) v99 (* (- 2) v33 v99) (* (* v33 v33) v99)) 0)
(= (+ (* (- 1) v100) (* (- 1) v101) (* v100 v2) (* v101 v2) (* v100 v34) (* (- 2) v100 v2 v34) (* v100 v2 (* v34 v34)) (* v101 v35) (* (- 2) v101 v2 v35) (* v101 v2 (* v35 v35)) (* (- 1) v69) (* v2 v69) (* v3 v69) (* (- 2) v2 v3 v69) (* v2 (* v3 v3) v69) (* (- 1) v70) (* v2 v70) (* v4 v70) (* (- 2) v2 v4 v70) (* v2 (* v4 v4) v70) (* (- 1) v71) (* v2 v71) (* v5 v71) (* (- 2) v2 v5 v71) (* v2 (* v5 v5) v71) (* (- 1) v72) (* v2 v72) (* v6 v72) (* (- 2) v2 v6 v72) (* v2 (* v6 v6) v72) (* (- 1) v73) (* v2 v73) (* v7 v73) (* (- 2) v2 v7 v73) (* v2 (* v7 v7) v73) (* (- 1) v74) (* v2 v74) (* (- 1) v75) (* v2 v75) (* (- 1) v76) (* v10 v76) (* v2 v76) (* (- 2) v10 v2 v76) (* (* v10 v10) v2 v76) (* (- 1) v77) (* v11 v77) (* v2 v77) (* (- 2) v11 v2 v77) (* (* v11 v11) v2 v77) (* (- 1) v78) (* v12 v78) (* v2 v78) (* (- 2) v12 v2 v78) (* (* v12 v12) v2 v78) (* (- 1) v79) (* v13 v79) (* v2 v79) (* (- 2) v13 v2 v79) (* (* v13 v13) v2 v79) (* v74 v8) (* (- 2) v2 v74 v8) (* v2 v74 (* v8 v8)) (* (- 1) v80) (* v14 v80) (* v2 v80) (* (- 2) v14 v2 v80) (* (* v14 v14) v2 v80) (* (- 1) v81) (* v15 v81) (* v2 v81) (* (- 2) v15 v2 v81) (* (* v15 v15) v2 v81) (* (- 1) v82) (* v16 v82) (* v2 v82) (* (- 2) v16 v2 v82) (* (* v16 v16) v2 v82) (* (- 1) v83) (* v17 v83) (* v2 v83) (* (- 2) v17 v2 v83) (* (* v17 v17) v2 v83) (* (- 1) v84) (* v18 v84) (* v2 v84) (* (- 2) v18 v2 v84) (* (* v18 v18) v2 v84) (* (- 1) v85) (* v19 v85) (* v2 v85) (* (- 2) v19 v2 v85) (* (* v19 v19) v2 v85) (* (- 1) v86) (* v2 v86) (* v20 v86) (* (- 2) v2 v20 v86) (* v2 (* v20 v20) v86) (* (- 1) v87) (* v2 v87) (* v21 v87) (* (- 2) v2 v21 v87) (* v2 (* v21 v21) v87) (* (- 1) v88) (* v2 v88) (* v22 v88) (* (- 2) v2 v22 v88) (* v2 (* v22 v22) v88) (* (- 1) v89) (* v2 v89) (* v23 v89) (* (- 2) v2 v23 v89) (* v2 (* v23 v23) v89) (* v75 v9) (* (- 2) v2 v75 v9) (* v2 v75 (* v9 v9)) (* (- 1) v90) (* v2 v90) (* v24 v90) (* (- 2) v2 v24 v90) (* v2 (* v24 v24) v90) (* (- 1) v91) (* v2 v91) (* v25 v91) (* (- 2) v2 v25 v91) (* v2 (* v25 v25) v91) (* (- 1) v92) (* v2 v92) (* v26 v92) (* (- 2) v2 v26 v92) (* v2 (* v26 v26) v92) (* (- 1) v93) (* v2 v93) (* v27 v93) (* (- 2) v2 v27 v93) (* v2 (* v27 v27) v93) (* (- 1) v94) (* v2 v94) (* v28 v94) (* (- 2) v2 v28 v94) (* v2 (* v28 v28) v94) (* (- 1) v95) (* v2 v95) (* v29 v95) (* (- 2) v2 v29 v95) (* v2 (* v29 v29) v95) (* (- 1) v96) (* v2 v96) (* v30 v96) (* (- 2) v2 v30 v96) (* v2 (* v30 v30) v96) (* (- 1) v97) (* v2 v97) (* v31 v97) (* (- 2) v2 v31 v97) (* v2 (* v31 v31) v97) (* (- 1) v98) (* v2 v98) (* v32 v98) (* (- 2) v2 v32 v98) (* v2 (* v32 v32) v98) (* (- 1) v99) (* v2 v99) (* v33 v99) (* (- 2) v2 v33 v99) (* v2 (* v33 v33) v99)) 0)
(> (+ v10 v11 v12 v13 v14 v15 v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v3 v30 v31 v32 v33 v34 v35 v4 v5 v6 v7 v8 v9) 33)
(< v3 1)
(> v1 0)
(= (+ (* v1 v36) v69) 0)
(= (+ (* v1 v37) v70) 0)
(= (+ (* v1 v38) v71) 0)
(= (+ (* v1 v39) v72) 0)
(= (+ (* v1 v40) v73) 0)
(= (+ (* v1 v41) v74) 0)
(= (+ (* v1 v42) v75) 0)
(= (+ (* v1 v43) v76) 0)
(= (+ (* v1 v44) v77) 0)
(= (+ (* v1 v45) v78) 0)
(= (+ (* v1 v46) v79) 0)
(= (+ (* v1 v47) v80) 0)
(= (+ (* v1 v48) v81) 0)
(= (+ (* v1 v49) v82) 0)
(= (+ (* v1 v50) v83) 0)
(= (+ (* v1 v51) v84) 0)
(= (+ (* v1 v52) v85) 0)
(= (+ (* v1 v53) v86) 0)
(= (+ (* v1 v54) v87) 0)
(= (+ (* v1 v55) v88) 0)
(= (+ (* v1 v56) v89) 0)
(= (+ (* v1 v57) v90) 0)
(= (+ (* v1 v58) v91) 0)
(= (+ (* v1 v59) v92) 0)
(= (+ (* v1 v60) v93) 0)
(= (+ (* v1 v61) v94) 0)
(= (+ (* v1 v62) v95) 0)
(= (+ (* v1 v63) v96) 0)
(= (+ (* v1 v64) v97) 0)
(= (+ (* v1 v65) v98) 0)
(= (+ (* v1 v66) v99) 0)
(= (+ v100 (* v1 v67)) 0)
(= (+ v101 (* v1 v68)) 0)
))

; input hypothesis
(define-fun hypothesis () Bool (= v2 0))

(assert assumptions)
(assert hypothesis)
(check-sat) ; checking the existence of an example to assumptions => hypothesis


(exit)