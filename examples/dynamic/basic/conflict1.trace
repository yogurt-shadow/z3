make bool var
make var
make atom
make clause
make var
make atom
make clause
make var
make atom
make atom
make clause
(declare-fun b0 () Bool)
(declare-fun x0 () Real)
(declare-fun x1 () Real)
(declare-fun x2 () Real)
(assert (and true
true
(not (< (+ x0 (- 23)) 0))
(not (> (+ x1 (- 18)) 0))
(or (> (+ x2 (* (- 1) x0) 10) 0) (< (+ x2 (* (- 1) x1) 30) 0))
))

b0 -> true
b0 -> true
x -> 0
b0 -> true
b1 y - 23 < 0 -> false
x -> 0
y -> 24
resolve, conflicting clause:
- y + x + 10 > 0 or - z + x + 30 < 0
xk: z
scope_lvl: 0
current assignment
b0 -> true
b1 y - 23 < 0 -> false
b2 z - 18 > 0 -> false
b4 - z + x + 30 < 0 -> false
x -> 0
y -> 24

before resolve
display trails:
[BVAR ASS] 0
[NEW STAGE]
[NEW STAGE]
[BVAR ASS] 1
[INF UPDATE] {}
[NEW STAGE]
[BVAR ASS] 2
[INF UPDATE] {}
[BVAR ASS] 4
make atom
m_xk: 2, z
new valid clause in explain:
!(x + 12 > 0) or !(- z + x + 30 < 0) or z - 18 > 0
case 2: only previous stages
new clause: 
!(x + 12 > 0) or - y + x + 10 > 0
after undo:
display trails:
[BVAR ASS] 0
[NEW STAGE]
[NEW STAGE]
[BVAR ASS] 1
[INF UPDATE] {}
resolve, conflicting clause:
!(x + 12 > 0) or - y + x + 10 > 0
xk: y
scope_lvl: 0
current assignment
b0 -> true
b1 y - 23 < 0 -> false
b3 - y + x + 10 > 0 -> false
x -> 0

before resolve
display trails:
[BVAR ASS] 0
[NEW STAGE]
[NEW STAGE]
[BVAR ASS] 1
[INF UPDATE] {}
[BVAR ASS] 3
make atom
m_xk: 1, y
new valid clause in explain:
!(x - 13 < 0) or y - 23 < 0 or !(- y + x + 10 > 0)
case 2: only previous stages
new clause: 
!(x + 12 > 0) or !(x - 13 < 0)
after undo:
display trails:
[BVAR ASS] 0
[NEW STAGE]
b0 -> true
b5 x + 12 > 0 -> false
x -> -13
b0 -> true
b1 y - 23 < 0 -> false
b5 x + 12 > 0 -> false
x -> -13
y -> 24
b0 -> true
b1 y - 23 < 0 -> false
b2 z - 18 > 0 -> false
b4 - z + x + 30 < 0 -> true
b5 x + 12 > 0 -> false
x -> -13
y -> 24
z -> 17.5
del atom
delete bool var
del atom
delete bool var
del atom
delete bool var
del atom
delete bool var
del atom
delete bool var
del atom
delete bool var
del atom
del atom
del atom
del atom
del atom
del atom
del atom
sat
